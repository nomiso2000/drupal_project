<?php
/**
 * Implements hook_theme().
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;


//function ex81_theme($existing, $type, $theme, $path) {
//  return [
//    'my_template' => [
//      'variables' => ['test_var' => NULL],
//    ],
//  ];
//}

//function ex81_block_access(\Drupal\block\Entity\Block $block, $operation, \Drupal\Core\Session\AccountInterface $account) {
//  // Example code that would prevent displaying the 'Powered by Drupal' block in
//  // a region different than the footer.
//  if ($operation == 'view') {
//    return AccessResult::forbiddenIf($block->getRegion() != 'footer')
//      ->addCacheableDependency($block);
//  }
//  // No opinion.
//  return AccessResult::neutral();
//}
//

//function ex81_theme($existing, $type, $theme, $path) {
//  return [
//    'my_template_controller' => [
//      'variables' => ['test_vars' => NULL],
//    ],
//    'my_template' => [
//      'variables' => ['test_var' => NULL],
//    ],
//  ];
//}

function ex81_theme($existing, $type, $theme, $path) {
  return [
    'theme_template' => [
      'variables' =>
        [
          'title' => NULL,
          'content' => NULL,
          'link' => NULL,
        ],
    ],
  ];
}

function ex81_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_login_form') {
    $form['actions']['submit']['#value'] = t('Feedback');
    //    $form['actions']['submit']['#submit'] = \Drupal::service('form_submitted')
    //      ->redirectForm($form_state->setRedirect('<front>'));
    $form['#submit'][] = '_login_page_redirect_user_login_form_submit';
  }
}

function _login_page_redirect_user_login_form_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $current_user = \Drupal::currentUser()->getRoles();
  if (in_array('content_editor', $current_user)) {
    return $form_state->setRedirect('system.admin_content');
  }
  return $form_state->setRedirect('<front>');

}

function ex81_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {


  if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'news' && $entity->field_last_update_date->value == '') {
    if (!$entity->isNew() && $entity->get('status')
        ->getValue() != $entity->original->get('status')
        ->getValue()) {
      $entity->field_last_update_date->value = date('Y-m-d') . 'T' . date('h:i:s');
    }
  }
}

function ex81_entity_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'news') {
    \Drupal::messenger()
      ->addMessage('Published date was updated: ');
  }

}

function ex81_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  if ($entity->getEntityTypeId() == 'node'
    && $entity->getType() == 'news'
    && $operation == 'view' && $entity->get('field_last_update_date')->date) {
    $entityDate = $entity->get('field_last_update_date')->date->getTimestamp();
    $now = new DrupalDateTime('now');
    $now->setTimezone(new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE));
    $now = $now->getTimestamp();
    if ($entityDate > $now) {
      if (in_array('content_editor', $account->getRoles()) ||
        $account->id() == $entity->getOwnerId()) {
        return AccessResult::neutral();
      }
      else {
        return AccessResult::forbidden();
      }
    }
    return AccessResult::neutral();
  }
}

function ex81_entity_field_access($operation, FieldDefinitionInterface $field_definition,
                                  AccountInterface $account, FieldItemListInterface $items = NULL) {

  if ($operation == 'edit' && $field_definition->getName() == 'field_last_update_date'
    && !$account->hasPermission('view field published date')) {
    return AccessResult::forbidden();
  }
  return AccessResult::neutral();
}
